# .github/workflows/jekyll-deploy.yml

name: Build and Deploy Jekyll site to GitHub Pages

on:
  # Runs on pushes targeting the default branch (usually 'main' or 'master')
  push:
    branches: ["main"] # Change this to your default branch if it's different

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4 # Checks out your repository code

      - name: Setup Ruby ✨
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0' # Specify Ruby version. Jekyll 3.9 works well with 2.7+, 3.0 is usually fine. Adjust if needed.
          bundler-cache: true # Automatically runs 'bundle install' and caches gems

      # If bundler-cache: true above isn't sufficient or causes issues, use manual steps:
      # - name: Setup Bundler Cache 缓存
      #   uses: actions/cache@v4
      #   with:
      #     path: vendor/bundle
      #     key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gems-
      # - name: Install dependencies 依存関係
      #   run: bundle install --jobs 4 --retry 3 --path vendor/bundle

      - name: Build Jekyll site 🏗️
        run: bundle exec jekyll build
        env:
          JEKYLL_ENV: production # Ensures Jekyll builds in production mode

      - name: Upload artifact ⬆️
        uses: actions/upload-pages-artifact@v3 # Uploads the built site (_site folder)
        with:
          # Upload entire repository
          path: './_site' # Default Jekyll output directory

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Sets the deployment URL output
    runs-on: ubuntu-latest
    needs: build # Runs only after the build job succeeds
    steps:
      - name: Deploy to GitHub Pages 🚀
        id: deployment
        uses: actions/deploy-pages@v4 # Deploys the artifact uploaded in the build job